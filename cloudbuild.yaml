#steps:
#  # Set a persistent volume according to /cloud-build/docs/build-config (search for volumes)
#  - name: 'ubuntu'
#    volumes:
#      - name: 'vol1'
#        path: '/persistent_volume'
#    args: ['cp', '-a', '.', '/persistent_volume']
#
#  # Build APK with Gradle Image from mounted /persistent_volume using name: vol1
#  - name: 'gcr.io/cloud-builders/docker'
#    volumes:
#      - name: 'vol1'
#        path: '/persistent_volume'
#    args: ['run', '-v', 'vol1:/home/networksurvey', '--rm', 'gcr.io/fullstackgcp/gradle', '/bin/sh', '-c', 'cd /home/networksurvey && ./gradlew clean assembleDebug']
#
#  # Push the APK Output from vol1 to your GCS Bucket with Short Commit SHA.
#  - name: 'gcr.io/cloud-builders/gsutil'
#    volumes:
#      - name: 'vol1'
#        path: '/persistent_volume'
#    args: ['cp', '/persistent_volume/networksurvey/build/outputs/apk/debug/*', 'gs://network-survey-builds/']
#
steps:
  - id: 'Restore Gradle Cache'
    name: gcr.io/cloud-builders/gsutil
    volumes:
      - name: 'vol1'
        path: '/persistent_volume'
    # we use rsync and not cp so that the step does not fail the first time it is run
    args: ['rsync', 'gs://gradle_cache_android-network-survey/', '.']

  - id: 'Build Debug APK'
    name: 'gcr.io/android-network-survey/android-builder'
    volumes:
      - name: 'vol1'
        path: '/persistent_volume'
    entrypoint: 'gradle-build'
    args: ['-g', '.gradle', 'assembleDebug']

  - id: 'Save Gradle Cache'
    name: gcr.io/cloud-builders/gsutil
    volumes:
      - name: 'vol1'
        path: '/persistent_volume'
    args: ['cp', 'cache.zip', 'gs://gradle_cache_android-network-survey/cache.zip']

  # Push the APK Output from vol1 to your GCS Bucket with Short Commit SHA.
  - id: 'Copy APK to GCP'
    name: 'gcr.io/cloud-builders/gsutil'
    volumes:
      - name: 'vol1'
        path: '/persistent_volume'
    args: ['cp', '/persistent_volume/networksurvey/build/outputs/apk/debug/networksurvey-1.9.0-SNAPSHOT-debug.apk', 'gs://network-survey-builds/']

timeout: 1200s
